name: Build binaries

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

env:
  PROJECT_NAME: mdv

permissions:
  contents: write

jobs:
  linux:
    name: Linux target ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - sparc64-unknown-linux-gnu

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo build artifacts
        uses: Swatinem/rust-cache@v2

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Build release binary
        run: cross build --release --target ${{ matrix.target }}

      - name: Ensure artifacts directory
        run: mkdir -p artifacts

      - name: Package zip
        run: zip -j "artifacts/${PROJECT_NAME}-${{ matrix.target }}.zip" "target/${{ matrix.target }}/release/${PROJECT_NAME}"

      - name: Install cargo-deb
        if: contains(matrix.target, 'linux-gnu') || contains(matrix.target, 'linux-musl')
        run: cargo install cargo-deb --locked

      - name: Build deb package
        if: contains(matrix.target, 'linux-gnu') || contains(matrix.target, 'linux-musl')
        run: cargo deb --no-build --target ${{ matrix.target }} --output "artifacts/${PROJECT_NAME}-${{ matrix.target }}.deb"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mdv-${{ matrix.target }}
          path: artifacts/*

  macos:
    name: macOS target ${{ matrix.target }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo build artifacts
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package zip
        run: |
          mkdir -p artifacts
          zip -j "artifacts/${PROJECT_NAME}-${{ matrix.target }}.zip" "target/${{ matrix.target }}/release/${PROJECT_NAME}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mdv-${{ matrix.target }}
          path: artifacts/*

  windows:
    name: Windows target ${{ matrix.target }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo build artifacts
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package zip
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          Compress-Archive -Path "target/${{ matrix.target }}/release/${env:PROJECT_NAME}.exe" -DestinationPath ("artifacts/${env:PROJECT_NAME}-${{ matrix.target }}.zip")

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mdv-${{ matrix.target }}
          path: artifacts/*

  snap:
    name: Snap package ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Build snaps
        uses: snapcore/action-build@v1
        with:
          snapcraft-channel: 7.x/stable
          snapcraft-args: --destructive-mode --target-arch=${{ matrix.arch }}

      - name: Collect snaps
        run: |
          mkdir -p artifacts
          SNAP_NAME=$(ls *.snap)
          mv "$SNAP_NAME" "artifacts/${PROJECT_NAME}-${{ matrix.arch }}.snap"

      - name: Upload snaps
        uses: actions/upload-artifact@v4
        with:
          name: mdv-snap-${{ matrix.arch }}
          path: artifacts/*

  release:
    name: Publish GitHub release
    runs-on: ubuntu-latest
    needs:
      - linux
      - macos
      - windows
      - snap
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Set version
        run: echo "VERSION=${GITHUB_REF##*/}" >> "$GITHUB_ENV"

      - name: Extract tag metadata
        id: tag_meta
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          COMMIT=$(git rev-list -n 1 "$TAG")
          MESSAGE=$(git for-each-ref "refs/tags/$TAG" --format='%(contents)')
          if [ -z "${MESSAGE//[$'\r\n\t ']/}" ]; then
            MESSAGE=$(git tag -l "$TAG" --format='%(contents)')
          fi
          if [ -z "${MESSAGE//[$'\r\n\t ']/}" ]; then
            MESSAGE=$(git show -s --format=%B "$COMMIT")
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "commit=$COMMIT" >> "$GITHUB_OUTPUT"
          printf 'message<<EOF\n%s\nEOF\n' "$MESSAGE" >> "$GITHUB_OUTPUT"

      - name: Generate GitHub release notes
        id: gh_notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          RESPONSE=$(gh api repos/${GITHUB_REPOSITORY}/releases/generate-notes \
            -f tag_name="${{ steps.tag_meta.outputs.tag }}" \
            -f target_commitish="${{ steps.tag_meta.outputs.commit }}")
          BODY=$(echo "$RESPONSE" | jq -r '.body // ""')
          printf 'body<<EOF\n%s\nEOF\n' "$BODY" >> "$GITHUB_OUTPUT"

      - name: Rename artifacts with version
        run: |
          shopt -s nullglob
          for file in dist/*; do
            base=$(basename "$file")
            new_base=${base/${PROJECT_NAME}/${PROJECT_NAME}-${VERSION}}
            mv "$file" "dist/${new_base}"
          done

      - name: Compose release body
        run: |
          {
            printf '%s\n\n' "$TAG_MESSAGE";
            echo '---';
            echo;
            printf '%s\n' "$GENERATED_NOTES";
          } > release-notes.md
        env:
          TAG_MESSAGE: ${{ steps.tag_meta.outputs.message }}
          GENERATED_NOTES: ${{ steps.gh_notes.outputs.body }}

      - name: List packaged files
        run: ls -R dist

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: release-notes.md
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
